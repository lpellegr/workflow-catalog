buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.3.2.RELEASE'
    }
}

plugins {
    id 'antlr'
    id 'com.github.kt3k.coveralls' version '2.5.0'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'java'
    id 'maven'
    id 'war'
}

apply plugin: 'spring-boot'

group = 'org.ow2.proactive'
version = version

bootRepackage {
    enabled = true
}

configurations {
    // The following module is excluded to avoid clashes when embedded inside the ProActive Scheduler
    all*.exclude module: 'spring-boot-starter-logging'

    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

coveralls {
    sourceDirs = allprojects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
}

ext {
    generatedSrcDir = "$projectDir/src/generated/java"
}

generateGrammarSource {
    arguments += ["-visitor", "-long-messages"]
    maxHeapSize = "64m"
    outputDirectory = file("$generatedSrcDir/org/ow2/proactive/workflow_catalog/rest/query/parser")
}

repositories {
    jcenter()
}

sourceSets {
    generated {
        java {
            srcDirs += generatedSrcDir
        }
    }

    main {
        java {
            srcDirs += generatedSrcDir
        }
    }

    integrationTest {
        java.srcDir file('src/integration-test/java')
        resources.srcDir file('src/integration-test/resources')

        compileClasspath = sourceSets.main.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}

springBoot {
    mainClass = 'org.ow2.proactive.workflow_catalog.rest.Application'
}

war {
    baseName = "workflow-catalog"
    version = version
}

dependencies {
    antlr 'org.antlr:antlr4:4.5.2'

    compile 'commons-fileupload:commons-fileupload:1.3.1'
    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.1'
    compile 'com.mysema.querydsl:querydsl-jpa:3.7.1'
    compile 'com.mysema.querydsl:querydsl-apt:3.7.1:jpa'

    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.3.2.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-log4j2:1.3.2.RELEASE'
    compile('org.springframework.boot:spring-boot-starter-web:1.3.2.RELEASE') {
        exclude module: 'spring-boot-starter-tomcat'
        exclude module: 'spring-boot-starter-validation'
    }
    compile 'org.springframework.hateoas:spring-hateoas:0.19.0.RELEASE'

    providedCompile 'org.springframework.boot:spring-boot-starter-tomcat:1.3.2.RELEASE'
    providedRuntime 'org.hsqldb:hsqldb:2.3.3'

    compile 'io.springfox:springfox-spring-web:2.3.1'
    compile 'io.springfox:springfox-swagger2:2.3.1'
    compile 'io.springfox:springfox-swagger-ui:2.3.1'

    testCompile 'com.google.truth:truth:0.28'
    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.10.19'

    integrationTestCompile 'com.jayway.restassured:rest-assured:2.8.0'
    integrationTestCompile 'org.springframework.boot:spring-boot-starter-test:1.3.2.RELEASE'
}

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    }
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    classpath += sourceSets.test.runtimeClasspath

    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoIntegrationTest.exec")
    }

    testLogging {
        events "passed", "skipped", "failed"
    }
}

jacocoTestReport {
    executionData test, integrationTest

    sourceSets project.sourceSets.main

    reports {
        html.enabled = true
        xml.enabled = true
    }

    // remove auto-generated classes from report
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    'org/ow2/proactive/workflow_catalog/rest/entity/Q*',
                    'org/ow2/proactive/workflow_catalog/rest/query/parser/*']);
        })
    }
}

task moveGeneratedFiles(type: Copy) {
    def copySrcDir = "$buildDir/classes/main"

    from(copySrcDir)
    includeEmptyDirs = false
    into(generatedSrcDir)
    include('**/*.java')

    doLast {
        delete fileTree(dir: copySrcDir , include: '**/*.java')
    }
}

clean {
    sourceSets.generated.java.srcDirs.each {
       srcDir -> delete srcDir
    }
}

compileJava.finalizedBy moveGeneratedFiles

task wrapper(type: Wrapper) {
    gradleVersion = '2.10'
}

check.dependsOn integrationTest

jacocoTestReport.dependsOn check
tasks.coveralls.dependsOn jacocoTestReport

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

idea {
    module {
        testSourceDirs += file('src/integration-test/java')
        testSourceDirs += file('src/integration-test/resources')

        scopes.TEST.plus += [
                configurations.integrationTestCompile,
                configurations.integrationTestRuntime
        ]
    }
}
